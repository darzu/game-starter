// function layoutActors(step: TimeStep) {
    //     // for (let ac of step.actors) {
    //     //     console.log("Creating layout for: " + ac.name);
    //     //     console.log("Layout: " + JSON.stringify(ac));
    //     //     // part of a group?
    //     //     if (ac.group) {
    //     //         console.log("group: " + ac.group);
    //     //         let groupRow = rows.filter(r => r.some(a => a.group == ac.group));
    //     //         if (groupRow.length > 1)
    //     //             throw "Multiple rows with group: " + ac.group;
    //     //         if (groupRow.length > 0) {
    //     //             if (isList(groupRow[0][0]) != isList(ac))
    //     //                 throw "Mismatch list vs actor type in group: " + ac.group
    //     //             groupRow[0].push(ac)
    //     //             continue;
    //     //         }
    //     //     }
    //     //     // continue
    //     //     rows.push([ac]);
    //     // }
    //     // for (let r of rows) {
    //     //     console.log("Row: " + JSON.stringify(r));
    //     // }
    //     let rowMarginWeight = 0.2;
    //     let rowPadWeight = 1.5;
    //     let rowHeightWeight = 1;
    //     let heightWeights: number[] = [];
    //     heightWeights.push(rowMarginWeight);
    //     let prevRow: Actor[] = [];
    //     for (let thisRow of rows) {
    //         if (areLists(prevRow) && areLists(thisRow)) {
    //             heightWeights.pop();
    //             heightWeights.push(rowMarginWeight);
    //         }

    //         heightWeights.push(rowHeightWeight);
    //         heightWeights.push(rowPadWeight);

    //         prevRow = thisRow;
    //     }
    //     heightWeights.pop();
    //     heightWeights.push(rowMarginWeight);
    //     console.log("Height weights: " + JSON.stringify(heightWeights));
    //     let pxPerWeight = distribute(heightWeights, canvasH);
    //     let padHeight = pxPerWeight * rowPadWeight;
    //     let rowHeight = pxPerWeight * rowHeightWeight;
    //     let marginHeight = pxPerWeight * rowMarginWeight;
    //     let actorWidth = 100; // TODO
    //     let listPad = marginHeight;

    //     let y = 0;
    //     prevRow = [];
    //     let firstRow = true;
    //     for (let r of rows) {
    //         let hJump = (areLists(prevRow) && areLists(r)) || firstRow ? marginHeight : padHeight;
    //         firstRow = false
    //         y += hJump

    //         let h = rowHeight;
    //         let w: number;
    //         let x: number;
    //         let padX: number;
    //         if (isList(r[0])) {
    //             let allListWidth = canvasW - (r.length + 1) * listPad;
    //             w = allListWidth / r.length; // TODO use weights
    //             padX = listPad;
    //             x = padX;
    //         }
    //         else {
    //             let numSpacers = r.length + 1.0;
    //             let spacerWidth = (canvasW - r.length * actorWidth) / numSpacers;
    //             w = actorWidth;
    //             padX = spacerWidth;
    //             x = padX
    //         }
    //         for (let ac of r) {
    //             let acLayout = Object.assign(clone(ac), { pos: [x, y] as V, size: [w, h] as V });
    //             actorLayouts.push(acLayout);

    //             // list members
    //             if (isList(ac)) {
    //                 let memberWidth = 70;
    //                 let memberMargin = 5;
    //                 let memX = x + memberMargin;
    //                 let memY = y + memberMargin;
    //                 let memW = memberWidth;
    //                 let memH = h - memberMargin * 2;
    //                 for (let mem of ac.members) {
    //                     let memL = Object.assign(clone(mem), { pos: [memX, memY] as V, size: [memW, memH] as V });
    //                     actorLayouts.push(memL);
    //                     memX += memW + memberMargin;
    //                 }
    //             }

    //             x += w + padX;
    //         }

    //         y += h

    //         prevRow = r;
    //     }
    // }